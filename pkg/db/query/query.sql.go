// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package query

import (
	"context"
	"database/sql"
	"time"
)

const attemptCreatingUser = `-- name: AttemptCreatingUser :exec
INSERT INTO users (email, full_name, business_category, department_number)
VALUES (?, ?, ?, ?)
ON DUPLICATE KEY UPDATE user_id = LAST_INSERT_ID(user_id)
`

type AttemptCreatingUserParams struct {
	Email            string
	FullName         string
	BusinessCategory UsersBusinessCategory
	DepartmentNumber string
}

func (q *Queries) AttemptCreatingUser(ctx context.Context, arg AttemptCreatingUserParams) error {
	_, err := q.db.ExecContext(ctx, attemptCreatingUser,
		arg.Email,
		arg.FullName,
		arg.BusinessCategory,
		arg.DepartmentNumber,
	)
	return err
}

const createEvent = `-- name: CreateEvent :exec
INSERT INTO events (name, description, event_date, parent_event_id)
VALUES (?, ?, ?, ?)
`

type CreateEventParams struct {
	Name          string
	Description   string
	EventDate     time.Time
	ParentEventID sql.NullInt32
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.ExecContext(ctx, createEvent,
		arg.Name,
		arg.Description,
		arg.EventDate,
		arg.ParentEventID,
	)
	return err
}

const createPhoto = `-- name: CreatePhoto :exec
INSERT INTO photos (path_to_photo, event_id)
VALUES (?, ?)
`

type CreatePhotoParams struct {
	PathToPhoto string
	EventID     uint32
}

func (q *Queries) CreatePhoto(ctx context.Context, arg CreatePhotoParams) error {
	_, err := q.db.ExecContext(ctx, createPhoto, arg.PathToPhoto, arg.EventID)
	return err
}

const createSession = `-- name: CreateSession :exec
INSERT INTO sessions (user_id, session_token)
VALUES (?, ?)
`

type CreateSessionParams struct {
	UserID       uint32
	SessionToken string
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) error {
	_, err := q.db.ExecContext(ctx, createSession, arg.UserID, arg.SessionToken)
	return err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events WHERE event_id = ?
`

func (q *Queries) DeleteEvent(ctx context.Context, eventID uint32) error {
	_, err := q.db.ExecContext(ctx, deleteEvent, eventID)
	return err
}

const deletePhoto = `-- name: DeletePhoto :exec
DELETE FROM photos WHERE photo_id = ?
`

func (q *Queries) DeletePhoto(ctx context.Context, photoID uint32) error {
	_, err := q.db.ExecContext(ctx, deletePhoto, photoID)
	return err
}

const deleteSessionWithToken = `-- name: DeleteSessionWithToken :exec
DELETE FROM sessions WHERE session_token = ?
`

func (q *Queries) DeleteSessionWithToken(ctx context.Context, sessionToken string) error {
	_, err := q.db.ExecContext(ctx, deleteSessionWithToken, sessionToken)
	return err
}

const getEvents = `-- name: GetEvents :many
SELECT name, description, event_date, creation_date, parent_event_id
FROM events
`

type GetEventsRow struct {
	Name          string
	Description   string
	EventDate     time.Time
	CreationDate  sql.NullTime
	ParentEventID sql.NullInt32
}

func (q *Queries) GetEvents(ctx context.Context) ([]GetEventsRow, error) {
	rows, err := q.db.QueryContext(ctx, getEvents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetEventsRow
	for rows.Next() {
		var i GetEventsRow
		if err := rows.Scan(
			&i.Name,
			&i.Description,
			&i.EventDate,
			&i.CreationDate,
			&i.ParentEventID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPhoto = `-- name: GetPhoto :one
SELECT photo_id, path_to_photo, creation_date, event_id FROM photos WHERE photo_id = ?
`

func (q *Queries) GetPhoto(ctx context.Context, photoID uint32) (Photo, error) {
	row := q.db.QueryRowContext(ctx, getPhoto, photoID)
	var i Photo
	err := row.Scan(
		&i.PhotoID,
		&i.PathToPhoto,
		&i.CreationDate,
		&i.EventID,
	)
	return i, err
}

const getPhotosByEventID = `-- name: GetPhotosByEventID :many
SELECT photo_id, path_to_photo, creation_date, event_id FROM photos WHERE event_id = ?
`

func (q *Queries) GetPhotosByEventID(ctx context.Context, eventID uint32) ([]Photo, error) {
	rows, err := q.db.QueryContext(ctx, getPhotosByEventID, eventID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Photo
	for rows.Next() {
		var i Photo
		if err := rows.Scan(
			&i.PhotoID,
			&i.PathToPhoto,
			&i.CreationDate,
			&i.EventID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPhotosSortedByDate = `-- name: GetPhotosSortedByDate :many
SELECT photo_id, path_to_photo, creation_date, event_id FROM photos ORDER BY creation_date DESC
`

func (q *Queries) GetPhotosSortedByDate(ctx context.Context) ([]Photo, error) {
	rows, err := q.db.QueryContext(ctx, getPhotosSortedByDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Photo
	for rows.Next() {
		var i Photo
		if err := rows.Scan(
			&i.PhotoID,
			&i.PathToPhoto,
			&i.CreationDate,
			&i.EventID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSessionWithToken = `-- name: GetSessionWithToken :one
SELECT session_id, user_id, creation_date, session_token
FROM sessions
WHERE session_token = ?
`

func (q *Queries) GetSessionWithToken(ctx context.Context, sessionToken string) (Session, error) {
	row := q.db.QueryRowContext(ctx, getSessionWithToken, sessionToken)
	var i Session
	err := row.Scan(
		&i.SessionID,
		&i.UserID,
		&i.CreationDate,
		&i.SessionToken,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT user_id, signup_date, last_signin_date, signin_locked, signin_locked_date, is_admin, email, full_name, business_category, department_number
FROM users
WHERE user_id = ?
`

func (q *Queries) GetUser(ctx context.Context, userID uint32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.SignupDate,
		&i.LastSigninDate,
		&i.SigninLocked,
		&i.SigninLockedDate,
		&i.IsAdmin,
		&i.Email,
		&i.FullName,
		&i.BusinessCategory,
		&i.DepartmentNumber,
	)
	return i, err
}

const getUserLastInsertID = `-- name: GetUserLastInsertID :one
SELECT user_id, signup_date, last_signin_date, signin_locked, signin_locked_date, is_admin, email, full_name, business_category, department_number FROM users WHERE user_id = LAST_INSERT_ID()
`

func (q *Queries) GetUserLastInsertID(ctx context.Context) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserLastInsertID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.SignupDate,
		&i.LastSigninDate,
		&i.SigninLocked,
		&i.SigninLockedDate,
		&i.IsAdmin,
		&i.Email,
		&i.FullName,
		&i.BusinessCategory,
		&i.DepartmentNumber,
	)
	return i, err
}

const getUserWithEmail = `-- name: GetUserWithEmail :one
SELECT user_id, signup_date, last_signin_date, signin_locked, signin_locked_date, is_admin, email, full_name, business_category, department_number
FROM users
WHERE email = ?
`

func (q *Queries) GetUserWithEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserWithEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.SignupDate,
		&i.LastSigninDate,
		&i.SigninLocked,
		&i.SigninLockedDate,
		&i.IsAdmin,
		&i.Email,
		&i.FullName,
		&i.BusinessCategory,
		&i.DepartmentNumber,
	)
	return i, err
}

const getUserWithSession = `-- name: GetUserWithSession :one
SELECT u.user_id, u.signup_date, u.last_signin_date, u.signin_locked, u.signin_locked_date, u.is_admin, u.email, u.full_name, u.business_category, u.department_number
FROM users u
JOIN sessions s
ON s.user_id = u.user_id
WHERE s.session_token = ?
`

func (q *Queries) GetUserWithSession(ctx context.Context, sessionToken string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserWithSession, sessionToken)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.SignupDate,
		&i.LastSigninDate,
		&i.SigninLocked,
		&i.SigninLockedDate,
		&i.IsAdmin,
		&i.Email,
		&i.FullName,
		&i.BusinessCategory,
		&i.DepartmentNumber,
	)
	return i, err
}

const updateEvent = `-- name: UpdateEvent :exec
UPDATE events
SET name = ?, description = ?, event_date = ?, parent_event_id = ?
WHERE event_id = ?
`

type UpdateEventParams struct {
	Name          string
	Description   string
	EventDate     time.Time
	ParentEventID sql.NullInt32
	EventID       uint32
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) error {
	_, err := q.db.ExecContext(ctx, updateEvent,
		arg.Name,
		arg.Description,
		arg.EventDate,
		arg.ParentEventID,
		arg.EventID,
	)
	return err
}

const updatePhotoPath = `-- name: UpdatePhotoPath :exec
UPDATE photos
SET path_to_photo = ?
WHERE photo_id = ?
`

type UpdatePhotoPathParams struct {
	PathToPhoto string
	PhotoID     uint32
}

func (q *Queries) UpdatePhotoPath(ctx context.Context, arg UpdatePhotoPathParams) error {
	_, err := q.db.ExecContext(ctx, updatePhotoPath, arg.PathToPhoto, arg.PhotoID)
	return err
}
